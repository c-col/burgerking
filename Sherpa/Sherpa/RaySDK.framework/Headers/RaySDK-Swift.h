// Generated by Apple Swift version 1.2 (swiftlang-602.0.53.1 clang-602.0.53)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import CoreData;
@import ObjectiveC;
@import CoreBluetooth;
@import CoreLocation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/// The type of location service authorization to request
///
/// <ul><li><p><strong>Always</strong>:    Location services will still run even when app is in background</p></li><li><p><strong>WhenInUse</strong>: Location services will only run when app is in foreground</p></li></ul>
typedef SWIFT_ENUM(NSInteger, AuthorizationType) {
  AuthorizationTypeAlways = 0,
  AuthorizationTypeWhenInUse = 1,
};


/// Represents the current bluetooth state of a device.
///
/// <ul><li><p><strong>Unknown</strong>:      State unknown, update imminent.</p></li><li><p><strong>Resetting</strong>:    The connection with the system service was momentarily lost, update imminent.</p></li><li><p><strong>Unsupported</strong>:  The platform doesn't support the Bluetooth Low Energy Central/Client role.</p></li><li><p><strong>Unauthorized</strong>: The application is not authorized to use the Bluetooth Low Energy Central/Client role.</p></li><li><p><strong>PoweredOff</strong>:   Bluetooth is currently powered off.</p></li><li><p><strong>PoweredOn</strong>:    Bluetooth is currently powered on and available to use.</p></li></ul>
typedef SWIFT_ENUM(NSInteger, BluetoothState) {
  BluetoothStateUnknown = 0,
  BluetoothStateResetting = 1,
  BluetoothStateUnsupported = 2,
  BluetoothStateUnauthorized = 3,
  BluetoothStatePoweredOff = 4,
  BluetoothStatePoweredOn = 5,
};


@interface NSData (SWIFT_EXTENSION(RaySDK))
@end


@interface NSManagedObject (SWIFT_EXTENSION(RaySDK))
@end


@interface NSTimer (SWIFT_EXTENSION(RaySDK))
@end


@interface NSURL (SWIFT_EXTENSION(RaySDK))
@end


@interface NSURLComponents (SWIFT_EXTENSION(RaySDK))
@end


@interface NSURLRequest (SWIFT_EXTENSION(RaySDK))
@end


@interface NSURLRequest (SWIFT_EXTENSION(RaySDK))
@end

@protocol RaySDKDelegate;


/// The <code>RSDK</code> class provides a centralized point of control and coordination for interfacing with Ray beacons.
SWIFT_CLASS("_TtC6RaySDK4RSDK")
@interface RSDK : NSObject

/// The RaySDK delegate
@property (nonatomic, weak) id <RaySDKDelegate> __nullable delegate;

/// Returns true if device is registered as <code>walked-in</code>. False is device is not in range of beacons or has <code>walked-out</code> of range.
@property (nonatomic) BOOL hasWalkedIn;

/// The value where a beacon should be registered as "in-range"
///
/// Default value is -75
@property (nonatomic) NSInteger beaconRSSITrigger;

/// The minimum value of the range where the beacon should stay in in-order to be considered "in-range"
///
/// Value must be less than <code>beaconMaximumThreshold</code> and within range of (∞, 0)
///
/// Default value is -80
@property (nonatomic) NSInteger beaconMinimumThreshold;

/// The maximum value of the range where the beacon should stay in in-order to be considered "in-range"
///
/// Value must be greater than <code>beaconMinimumThreshold</code> and within range of (∞, 0]
///
/// Default value is 0
@property (nonatomic) NSInteger beaconMaximumThreshold;

/// The value where a beacon should be registered as "out-of-range"
///
/// Value must be less than <code>beaconMinimumThreshold</code>
///
/// Default value is -90
@property (nonatomic) NSInteger beaconExitTrigger;

/// The time to wait (seconds) before a beacon is registered when entering its region
///
/// Default value is 10 seconds
@property (nonatomic) NSTimeInterval walkInTimeToWait;

/// The time to wait (seconds) before a beacon is registered when exiting its region
///
/// Default value is 10 seconds
@property (nonatomic) NSTimeInterval walkOutTimeToWait;

/// The time to wait (seconds) between identifying identical beacons
///
/// Default value is 6 hours
@property (nonatomic) NSTimeInterval subsequentRangingInterval;

/// If <code>true</code>, background process time will be extended while app is in background
///
/// Default value is <code>false</code>
@property (nonatomic) BOOL enableBackgroundProcessTimeExtension;

/// If <code>true</code>, <code>rsdkDidRangeRayBeacon:inRegionWithIdentifier:</code> will continuously return all ranged beacons. Avoid continuous ranging to conserve battery.
///
/// Default value is <code>false</code>
@property (nonatomic) BOOL enableContinuousRanging;

/// If <code>true</code>, <code>rsdkDidWalkOutOfBeacon:inRegionWithIdentifier:</code> will adhere to <code>beaconExitTrigger</code> and <code>walkOutTimeToWait</code> values.
///
/// <code>enableContinuousRanging</code> must be set to <code>true</code>
///
/// Default value is <code>false</code>
@property (nonatomic) BOOL enableCustomWalkOut;

/// Initializes a <code>RSDK</code> instance with the api key
///
/// \param apiKey The api key for making Ray requests
+ (void)sharedInstanceWithApiKey:(NSString * __nonnull)apiKey;

/// Returns the RaySDK singleton instance
///
/// \returns The RaySDK instance created in <code>RSDK</code>
+ (RSDK * __nonnull)sharedInstance;

/// Starts monitoring for Ray beacons.
///
/// If location services authorization has not been requested, will attempt to request if status is <code>NotDetermined</code>
- (void)startMonitoring;

/// Stops monitoring for Ray beacons.
- (void)stopMonitoring;

/// Start ranging for all monitored regions
- (void)startRanging;

/// Stop ranging for all currently ranged regions
- (void)stopRanging;

/// Sets the location service authorization request
///
/// <ul><li><p>Always</p></li><li><p>WhenInUse (Default)</p></li></ul>
/// \param authorizationType The authorization type to request
- (void)setAuthorizationType:(enum AuthorizationType)type;
@end

@class CBCentralManager;
@class CBPeripheral;
@class NSNumber;

@interface RSDK (SWIFT_EXTENSION(RaySDK)) <CBCentralManagerDelegate>

/// Invoked when the central manager’s state is updated.
///
/// \param central The central manager whose state has changed.
- (void)centralManagerDidUpdateState:(CBCentralManager * __null_unspecified)central;

/// Invoked when the central manager discovers a peripheral while scanning.
///
/// \param central The central manager providing the update.
///
/// \param peripheral The discovered peripheral.
///
/// \param advertisementData A dictionary containing any advertisement data.
///
/// \param RSSI The current received signal strength indicator (RSSI) of the peripheral, in decibels.
- (void)centralManager:(CBCentralManager * __null_unspecified)central didDiscoverPeripheral:(CBPeripheral * __null_unspecified)peripheral advertisementData:(NSDictionary * __null_unspecified)advertisementData RSSI:(NSNumber * __null_unspecified)RSSI;
@end

@class CLLocationManager;
@class CLRegion;
@class CLBeaconRegion;

@interface RSDK (SWIFT_EXTENSION(RaySDK)) <CLLocationManagerDelegate>

/// Tells the delegate that the authorization status for the application changed.
///
/// \param manager The location manager object reporting the event.
///
/// \param status The new authorization status for the application.
- (void)locationManager:(CLLocationManager * __null_unspecified)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;

/// Tells the delegate about the state of the specified region.
///
/// \param manager The location manager object reporting the event.
///
/// \param state The state of the specified region. For a list of possible values, see the <code>CLRegionState</code> type.
///
/// \param region The region whose state was determined.
- (void)locationManager:(CLLocationManager * __null_unspecified)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion * __null_unspecified)region;

/// Tells the delegate that the user entered the specified region.
///
/// \param manager The location manager object reporting the event.
///
/// \param region An object containing information about the region that was entered.
- (void)locationManager:(CLLocationManager * __null_unspecified)manager didEnterRegion:(CLRegion * __null_unspecified)region;

/// Tells the delegate that the user left the specified region.
///
/// \param manager The location manager object reporting the event.
///
/// \param region An object containing information about the region that was exited.
- (void)locationManager:(CLLocationManager * __null_unspecified)manager didExitRegion:(CLRegion * __null_unspecified)region;

/// Tells the delegate that one or more beacons are in range.
///
/// \param manager The location manager object reporting the event.
///
/// \param beacons An array of <code>CLBeacon</code> objects representing the beacons currently in range. If beacons is empty, you can assume that no beacons matching the specified region are in range. When a specific beacon is no longer in beacons, that beacon is no longer received by the device. You can use the information in the <code>CLBeacon</code> objects to determine the range of each beacon and its identifying information.
///
/// \param region The region object containing the parameters that were used to locate the beacons.
- (void)locationManager:(CLLocationManager * __null_unspecified)manager didRangeBeacons:(NSArray * __null_unspecified)beacons inRegion:(CLBeaconRegion * __null_unspecified)region;

/// Tells the delegate that new location data is available.
///
/// \param manager The location manager object that generated the update event.
///
/// \param locations An array of <code>CLLocation</code> objects containing the location data. This array always contains at least one object representing the current location. If updates were deferred or if multiple locations arrived before they could be delivered, the array may contain additional entries. The objects in the array are organized in the order in which they occurred. Therefore, the most recent location update is at the end of the array.
- (void)locationManager:(CLLocationManager * __null_unspecified)manager didUpdateLocations:(NSArray * __null_unspecified)locations;
@end



/// The <code>RSDKBeacon</code> class represents a beacon that was encountered during region monitoring.
SWIFT_CLASS("_TtC6RaySDK10RSDKBeacon")
@interface RSDKBeacon : NSObject

/// Most significant value associated with the beacon.
@property (nonatomic, readonly) CLBeaconMajorValue major;

/// Least significant value associated with the beacon.
@property (nonatomic, readonly) CLBeaconMinorValue minor;

/// Proximity of the beacon from the device.
@property (nonatomic, readonly) CLProximity proximity;

/// Represents an one sigma horizontal accuracy in meters where the measuring device's location is referenced at the beaconing device.
///
/// This value is heavily subject to variations in an RF environment. A negative accuracy value indicates the proximity is unknown.
@property (nonatomic, readonly) CLLocationAccuracy accuracy;

/// Received signal strength in decibels of the specified beacon.
///
/// This value is an average of the RSSI samples collected since this beacon was last reported.
@property (nonatomic, readonly) NSInteger rssi;

/// A string that represents the contents of the receiving class.
@property (nonatomic, readonly, copy, getter=description) NSString * __nonnull description;
@end

@class NSError;


/// The delegate of an <code>RSDK</code> object must adopt the <code>RaySDKDelegate</code> protocol.
SWIFT_PROTOCOL("_TtP6RaySDK14RaySDKDelegate_")
@protocol RaySDKDelegate <NSObject>
@optional

/// Tells the delegate that one or more beacons are in range.
///
/// \param beacon An array of verified <code>RSDKBeacon</code> objects representing the beacons currently in range.
///
/// \param identifier The region identifier of the beacon ranged
- (void)rsdkDidRangeRayBeacon:(NSArray * __null_unspecified)beacon inRegionWithIdentifier:(NSString * __nonnull)identifier;

/// Tells the delegate that the beacon has entered the region
///
/// \param identifier The identifier of the region the beacon entered
- (void)rsdkDidEnterRegionWithIdentifier:(NSString * __nonnull)identifier;

/// Tells the delegate that the beacon has exited the region
///
/// \param identifier The identifier of the region the beacon exited
- (void)rsdkDidExitRegionWithIdentifier:(NSString * __nonnull)identifier;

/// Tells the delegate that app has walked into a beacon range. The beacon will first be verified first before being returned
///
/// \param beacon The returned <code>RSDKBeacon</code> object that was ranged and verified
///
/// \param identifier The region identifier of the beacon ranged
- (void)rsdkDidWalkInToBeacon:(RSDKBeacon * __null_unspecified)beacon inRegionWithIdentifier:(NSString * __nonnull)identifier;

/// Tells the delegate that app has walked out of a beacon range.
///
/// \param beacon The returned <code>RSDKBeacon</code> object that the app has walked out of
///
/// \param identifier The region identifier of the beacon ranged
- (void)rsdkDidWalkOutOfBeacon:(RSDKBeacon * __null_unspecified)beacon inRegionWithIdentifier:(NSString * __nonnull)identifier;

/// Tells the delegate that the SDK beacon list has been set up
- (void)rsdkListReady;

/// Tells the delegate that the an error occured
///
/// \param error The <code>NSError</code> object containing the error description and error code
- (void)rsdkDidFailWithError:(NSError * __null_unspecified)error;

/// Tells the delegate that a bluetooth peripheral's state has changed
///
/// \param state The state the peripheral changed to.
- (void)rsdkBluetoothManagerDidUpdateState:(enum BluetoothState)state;
@end

#pragma clang diagnostic pop
